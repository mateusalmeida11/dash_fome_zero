# bibliotecas: 

import streamlit as st
import pandas as pd
import numpy as np 
import plotly.express as px
from pathlib import Path
import inflection as inflection
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static
from PIL import Image
# fun√ß√µes para o dataframe 

## fun√ß√£o para descobrir quais s√£o as colunas que tem valores iguais 

def coluna_values_unicos (df): 

    #extraindo as colunas do dataframe
    colunas = list(df.columns)

    colunas_unicas = [coluna_unica for coluna_unica in colunas if len(df[coluna_unica].unique()) == 1]

    return colunas_unicas

## fun√ß√£o para preencher os pa√≠ses: 

COUNTRIES = {
   1: "India",
   14: "Australia",
   30: "Brazil",
   37: "Canada",
   94: "Indonesia",
   148: "New Zeland",
   162: "Philippines",
   166: "Qatar",
   184: "Singapure",
   189: "South Africa",
   191: "Sri Lanka",
   208: "Turkey",
   214: "United Arab Emirates",
   215: "England",
   216: "United States of America",
}
def country_name(country_id): return COUNTRIES[country_id]

## fun√ß√£o para cria√ß√£o do nome das cores 

COLORS = {
   "3F7E00": "darkgreen",
   "5BA829": "green",
   "9ACD32": "lightgreen",
   "CDD614": "orange",
   "FFBA00": "red",
   "CBCBC8": "darkred",
   "FF7800": "darkred",
}
def color_name(color_code): return COLORS[color_code]

## fun√ß√£o para renomear os nomes dos dataframes: 

def rename_columns(dataframe):
   df = dataframe.copy()
   title = lambda x: inflection.titleize(x) 
   snakecase = lambda x: inflection.underscore(x) 
   spaces = lambda x: x.replace(" ", "")
   cols_old = list(df.columns)
   cols_old = list(map(title, cols_old)) 
   cols_old = list(map(spaces, cols_old)) 
   cols_new = list(map(snakecase, cols_old)) 
   df.columns = cols_new
   return df

## fun√ß√£o para categorizar a comida 

def create_price_tye(price_range):
   if price_range == 1: 
      return "cheap"
   elif price_range == 2: 
      return "normal"
   elif price_range == 3: 
      return "expensive"
   else:
      return "gourmet" 
   
# abrindo o arquivo para gerar o dataframe

## caminho do arquivo: 

arquivo = Path.cwd()/'dataset'/'zomato.csv'

## criando um dataframe

df = pd.read_csv(arquivo)

# limpeza de dados 

## pelo m√©todo info conseguimos identificar que tem 15 linhas na coluna 'Cusines' que s√£o nulas. Desse modo vamos remover essas linhas 

df = df.dropna().reset_index(drop=True)

## removendo colunas com todos os valores iguais 

df = df.drop(coluna_values_unicos(df),axis=1)

## colocando o nome dos pa√≠ses pela fun√ß√£o e criando uma nova coluna

df['Country Name'] = df['Country Code'].apply(country_name)

## criando uma coluna com o nome das cores

df['Color Name'] = df['Rating color'].apply(color_name)

## removendo linhas duplicadas

df = df.drop_duplicates().reset_index(drop=True)

## renomeando o nome das colunas 

df = rename_columns(df)

## categoriazando as cozinhas por apenas um tipo 

df["cuisines"] = df.loc[:, "cuisines"].apply(lambda x: x.split(",")[0])

## usando a fun√ß√£o de categoriza√ß√£o para comida

df['price_range_name'] = df['price_range'].apply(create_price_tye)

#============================================== Layout Streamlit ========================================================================

st.set_page_config(page_title='üìä Main Page',layout='wide')

#====================================================Sidebar==================================================================================

# abrindo a imagem do logo

image = Image.open('logo.png')

st.sidebar.image(image,width=120,use_column_width=True)

# criando divis√£o entre as partes do sidebar

st.sidebar.markdown("""---------------------------------------------------------------------------------------------""")

# cria√ß√£o dos filtros 

st.sidebar.markdown('# Filtros')
st.sidebar.caption(':white[Escolha os pa√≠ses que deseja visualizar os restaurantes]')

## cria√ß√£o do multiselect filtro pa√≠s

restaurant_option = st.sidebar.multiselect('Escolha os Pa√≠ses que Deseja visualizar os Restaurantes',
                                           df['country_name'].unique(),
                                           default=['Brazil','England','Qatar','South Africa','Canada','Australia'])

## atribui√ß√£o do filtro de pa√≠s

df = df.loc[df['country_name'].isin(restaurant_option),:]


## cria√ß√£o da copy da p√°gina Main Page

st.markdown('# Fome Zero!')
st.markdown('## O Melhor lugar para encontrar seu mais novo restaurante favorito')
st.markdown('#### Temos as seguintes marcas dentro da nossa plataforma:')

# indicadores 

with st.container(): 

    col1, col2, col3, col4, col5 = st.columns(5)

    with col1: 

        restaurantes_unicos = len(df['restaurant_id'].unique())
        col1.metric('Restaurantes\n Cadastrados',restaurantes_unicos)
        
    with col2: 
       
       paises_unicos = len(df['country_name'].unique())

       col2.metric('Pa√≠ses \ncadastrados',paises_unicos)
    
    with col3: 
       
       cidades_unicas = len(df['city'].unique())

       col3.metric('Cidades Cadastradas',cidades_unicas)
    
    with col4: 
       
        total_avaliacoes = df['votes'].sum()
        col4.metric('Avalia√ß√µes Feitas',total_avaliacoes)
    
    with col5: 
       
       tipos_culinarias = df['cuisines'].nunique()
       col5.metric('Tipos de Culin√°rias',tipos_culinarias)

with st.container(): 
   
   mapa = folium.Map()
   marker_cluster = MarkerCluster().add_to(mapa)
   
   for index,info_location in df.iterrows(): 

        pop_up_text = (f"<strong>{info_location['restaurant_name']}</strong>"
                    f"<br><br>Price: {info_location['average_cost_for_two']} ({info_location['currency']}) para dois"
                    f"<br>Type: {info_location['cuisines']}<br>Aggregate Rating: {info_location['aggregate_rating']}/5.0")
    
        cor_restaurante = info_location['color_name']

        folium.Marker([info_location['latitude'],info_location['longitude']],
                  popup=folium.Popup(pop_up_text,max_width=4500),
                  icon=folium.Icon(color=cor_restaurante,icon='home')).add_to(marker_cluster)
   
   folium_static(mapa,width=897,height=600)